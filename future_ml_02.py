# -*- coding: utf-8 -*-
"""FUTURE_ML_02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tyRQvqR3DJmuYV6fokuRuofo--JR-NiZ
"""

pip install yfinance

import yfinance as yf
import pandas as pd
ticker = "AAPL"
stock_data = yf.download(ticker, start="2015-01-01", end="2024-12-31")
print(stock_data.head())
stock_data.to_csv("apple_stock_data.csv")

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense, Dropout

#Load stock data
ticker = 'AAPL'
df = yf.download(ticker, start='2015-01-01', end='2024-12-31')
df = df[['Open', 'High', 'Low', 'Close', 'Volume']]

#Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)

#Create sequences
def create_sequences(data, seq_len):
    X, y = [], []
    for i in range(seq_len, len(data)):
        X.append(data[i - seq_len:i])
        y.append(data[i, 3])
    return np.array(X), np.array(y)

sequence_length = 90
X, y = create_sequences(scaled_data, sequence_length)

#Split into training and test sets
split = int(0.8 * len(X))
X_train, y_train = X[:split], y[:split]
X_test, y_test = X[split:], y[split:]

#Build GRU model
model = Sequential([
    GRU(50, return_sequences=True, input_shape=(X.shape[1], X.shape[2])),
    Dropout(0.1),
    GRU(50),
    Dropout(0.1),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=30, batch_size=32, verbose=1)

#Predict and inverse transform
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(np.concatenate([np.zeros((predictions.shape[0], 3)), predictions, np.zeros((predictions.shape[0], 1))], axis=1))[:, 3]
y_test_actual = scaler.inverse_transform(np.concatenate([np.zeros((y_test.shape[0], 3)), y_test.reshape(-1, 1), np.zeros((y_test.shape[0], 1))], axis=1))[:, 3]

#Evaluate the model
mse = mean_squared_error(y_test_actual, predictions)
print(f"Mean Squared Error: {mse:.2f}")

#Visualization
plt.figure(figsize=(12,6))
plt.plot(y_test_actual, color='blue', label='Actual Stock Price')
plt.plot(predictions, color='red', label='Predicted Stock Price')
plt.title(f'{ticker} Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()